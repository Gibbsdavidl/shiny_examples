library(shiny)
library(plotly)
library(heatmaply)
library(ggplot2)

# rows:
#  each row will be a continuous variable, split by X
#
# cols:
#  each column will correspond to one variable, also split by X.
#
# catx:
#  the catagory to split the row var into

buildDataFrame <- function(dat, var1, var2, catx)
{
  # get the vectors associated with each term
  cats <- sort(getCats(dat, catx))
  vars <- sort(getVars(var1))
  print(cats)
  # this would be the correlations
  cormat <- matrix(data=0, ncol=length(cats), nrow=length(vars))
  rownames(cormat) <- vars
  colnames(cormat) <- cats
  # for each factor in catx
  for (ci in cats) {
    # subset dat
    subdat <- dat[dat[,catx] == ci,]
    # compute correlation 
    for (vi in vars) {
      cormat[vi,ci] <- cor(subdat[,vi], subdat[,var2], method="spearman", use="pairwise.complete.obs")
    }      
  }  
  # give it nice names
  #colnames(cormat) <- sapply(colnames(cormat), getNiceName)
  rownames(cormat) <- sapply(rownames(cormat), getNiceName)
  cormat[is.na(cormat)] <- 0
  cormat
}


server <- function(input, output) {
  
  load("data/pan_immune_fm.rda")

  # renderPlotly() also understands ggplot2 objects!
  output$plot <- renderPlotly({
    # first build the correlation matrix
    df <- buildDataFrame(dat, input$var1, input$var2, input$catx)
    # then get the heatmap options
    cluster_cols <- as.logical(input$clustercols)
    cluster_rows <- as.logical(input$clusterrows)
    # color scheme
    rwb <- colorRampPalette(colors = c("blue", "white", "red"))
    heatmaply(df, 
              main = getNiceName(input$var2), 
              Colv=cluster_cols, Rowv=cluster_rows,
              colors = rwb,
              margins = c(150,200,NA,0)) %>% 
      layout(xaxis = list(tickangle = 45))
  })
  
  output$event <- renderPrint({
    d <- event_data("plotly_hover")
    if (is.null(d)) "Hover on a point!" else d
  })
}


